# ISAQB-Seminar @zoom at Software Quality Labs

- Stephan Christman is lecturer
- no presence training - just via Zoom

## 20200824

- erstmal grundbegriffe und defintionen, was ist architektur?
- kommunikation, dokumentation - sprache zu anderen
- wie bewertet man architekturen?
- wie merkt man, dass architektur aus dem ruder läuft? maßnahmen?
- bei SoftwareQualityLabs scheinen alle zu bestehen; auch bei denen, die am Donnerstag gleich die Prüfung machen; gut machbar

- Herr N. arbeitet curtis instruments in biberis schweiz; medizinbereich, handcontrols für elektrische rollstühle; mölchte lernen bei einer legacy software die architektur gerade zu rücken; .NET und Xamarin
- Herr Lindecke-Klein; Uxmar in Kiel; dienstleister im bereich usability; maschinenbau; 25 jahre erfahrung; mappen von kundenanforderungen auf ISO läuft, aber wie kann man das auf eine architektur herunterbrechen; großer Freud von Ralph Westphal mit seinem "Flowdesign"; arc42 Vorlage in einem Projekt
- Herr H.; DAimler; Automotive-Bereich; autonomes Fahren; Bosch oder auch nvidia; backend; auch product owner; Überzeugung und Kommunikation; C4-Model (?); Kontext und Diagramme vereinheitlichen; Wissen bestätigen; neue Aspekte kennenlernen
- Herr Christmann als Tutor: TU Berlin Informatik; Künstliche Intelligenz; wissensbasierte Systeme; Embedded Bereich; Projektleiter; Teamleiter; "Qualität" am Ende; so spannend; dann zu Software Quality Lab; dort zufrieden; "wie kann man Qualität sicherstellen"?
-- Bereiche: Beratung; A-Spice-zertifizierung; Prozesses, klassisches Academy-Geschäft (UML, Scrum, Requirements; Testing; ..); operatives Geshäcft (Testmanager) - "Vorarlberg ist klein"; Frameworks entwickeln; kodieren; Werkzeuge (nicht nur nebenher anschaffen ..),
- Was kann man tun, damit man nachher nicht versucht zwanghaft Qualität hineinzutesten. Sondern, dass Qualität von Anfang an entsteht?
- Presencetrainings auch wieder machbar, da Masken doch recht gut schützen.

- Lernen mit "DEM Buch"; unklar welches Buch; ein Teilnehmer hat ein orangenes; meines ist grün
- Trainer sagt, dass das Buch - Nachfragen wegen Buch bei Organisatorin/nen

- aushandeln, wann man beginnen möchte
- drei Pausen: nach 1,5 h pause, 12 uhr mittagspause; dann 14 uhr eine weitere (kleine = 15 min Pausen)

------------------------
### Grundbegriffe

- keine einheitliche defintion von Architektur: auf eine Def. geeinigt
- Welche Rolle nimmt der Architekt ein? Skills? Was ist wichtig? Welche Kommunikation? Reicht es ein brillianter Techniker zu sein?
- SW-intensive Systeme
- Architektur stellt immer einen Kompromiss dar: stark und minder ausgeprägte Kategorien
- metapher der gebäudearchitektur: wird oft synonym verwendet; in bestimmten aspekten ähnliche betrachtungsweise; Strukturen um ein komplexes problem verständlich machen durch abstaktion;
- umldiagramme: sequenz-d., ..
besteht aus verschiedenen sichten
- informationen rausnhemen, die für diesen fokus nicht relevant sind; andere informationen hervorgehoben: siehe 3d-ansicht; grundriss oder elektroplan
- Entwurfsentscheidungen sschaffen Raum für Flexibilität: nachträgliche Änderung möglioch, aber vielleicht nicht ökonomisch machbar
- im Rahmen ist das System gut anpassbar; außerhalb nicht
- Cloud, Microservices, ... frühere Zeiten andere Ansätze (keine Redundanz; Hardware teuer; ja nichts vielfach haben)
- falls sich die Kontextbedingungen ändern, muss das System anpgeasst werden. Vorschau i die Zukufnt nur begrenzt möglich
- wie sieht der Problembereich aus? Sichten und Abstraktionen helfen -> Qualität schaffen

- welche menge an defintionen gibt es?
- EX! übung: welche begrifflichkeiten kommen in nallen sechs defintionen vor?
-- components; relationship between components; environment; innensicht/außensicht; constraints, fundamental; system; Orgranisation
-- Result:
--- Komponenten/Bausteine mit Schnittstellen und Beziehungen (Komponenten ist Baustein, aber nicht jeder Baustein muss eine Komponente sein; Ausprägung)
--- Bausteine als  allgemeiner Begriff, Komponenten als spezielle Ausprägung davon (Stereotyp Component?)
--- (cost cuttin concerns (?)) - nicht alles kann beliebig aufgeteilt werden
--- übergreifende entwurfsentscheidungen mit systemweiten oder den gesamten lebenszyklus betreffenden Konsequenzen (Architekt sollte sich mit Desing auskennen; gensauo wie umgekehrt)
--- (Desing als Verfeinerung der Architektur)

was muss ein Architekt können?
- reicht es aus sich mit der Technik auszukennen?
- Architektur immer als Kompromiss; eierlegende Wollmilchsau nicht möglich; bedingt durch die Einflußfaktoren (die zum Teil in Widerspruch stehen)
- Anforderungsanalyse: dort sollte der A. mitarbeiten: Anforderungsmanagement; so ist es möglich fürhzeitig ein Feedback zu geben; mit Produktmanagement und PO; auch Prüfung der Machbarkeit; Kosten; Reliablity; Portability; .. haben hohen Einfluss auf die Archtitektur, aber oft nicht explizit genannt
- mitmachen beim RE! (nicht nur, aber involviert sein)
- Prototypen anfragen
- Anforderungen; Priorisierung; Releases- & Iterationsplan
- Hardwareentwicklung: Abgrenzung HW und SW; 
- Qualitätssicherung: Risikenm, Zeitplan, Testkonzeopt, Testbarkeit, Testautomatisierung vorbereiten
- IT-Betrieb:
- Projektleitung: projektplan; Entscheidung über Umfang, Konste, Zeitplan
- es reicht nicht nur technisch brilliant uafgestellt zu sein; sondern man muss kommunikativ gut aufgestellt sein; kompromisses schließen, leute abholen, win-wion-situationen schaffen, .. nicht nur in hinsicht auf die reine funktionalität
- verständnis über das System herstellen; dependency injection, observer pattern, states, .. so erklären, das leute auch außerhalb mitreden können
- raum schaffen leuten zuzuhören, die tenisch versiert, aber introvertiert sind
- sechs stakeholder teilweise auch im konflikt
- PO wird an features bemeessen; dev technisch anspruchsvolle lösung; PM cost-cutting ..
typen der sw-intensiven systeme: informationsS, embedded S, mobile SW
- Informationssystem:
-- darstellung und strukturing der information sehr wichtig für die akzeptanz des systems; entscheidungs und unterstützungssystem
- Entscheidungsunterstützungssysteme; Expertensysteme; Suchmaschine; Büroautomatisierung
- architektur im wasserfallmodell: rückschritte/rückmeldungen möglich; aber nur zum nächstvorderen schritt; führt zu problemen, der kunde wird seine lösungswünsche anpassen, also das ziel bewegt sich
- V-modell als verfeinerung: aber trotzdem noch ein phasenmodell
- man(n) hat haufig mit unvollständiger information zu tun; iterative architektur-entwicklung dann als natürliche folge; inkremementelle entwicklung
- Scrum in Grundzügen: Selbstheilung durch iterative abwicklung; transparent umsetzung der "dinge"; klare Aufteilungen; falls man etwas direkt nach Sprint ändern will - weiß der PO eigentlich was er (oder die stakeholder) wollen?; oder falls team nicht performt, sollte man nachbessern; zielen bei moving target einfacher; product backlog, sprint backlog
- welche folgen für die architektur (scrum): innerhalb des teams mit PO und Team zusammenarbeiten; was, wenn man aber einen zentralisitischen ansatz für die frameworks hat? in drei wochen kann man die nicht so viel umsetzen, viel, viel initialisierungsaufwand; aber wir sind nicht allein mit diesem problem, Krücke (Hilfe) der Nullsprints: 2-3 sprints mit durchstich technisch die basis legen (tooling und mit sonstigen dingen, die man benötigt; mit timeboxed events); oder am anfang iust das potential shipable product "so dünn"; vielleicht am anfang nur ein "login screen"; und nebenbei die architektur entwicklen; oder eben iterativ-inkrementell
- [Pause bis 10:55 Uhr]

## Ebenen der Architektur:
- Themen bisher: Bausteine, Schnittestellen, Definition der Begrifflichkeiten, 
- [check this] conways law: organisiation und teamstruktur stehen in wechselwirkung zueinander; kommunikatinsstruktur ist eine kopie der systemstruktur; melvon conway 1968
- kann man teams aufteilen, wenn man bausteine nicht entkoppelt? nur mit hohem orga-aufwand
- technische lösung sollte zur orga-struktur passen; also die technische lösung; das kann zu viel negativem feedback führen
- 4 teams working on a compiler -> four pass compiler
- falls man eine schichten architektur: gui, logick datenbank hat -> dann drei teams
- architekten in jedem team: abstimmung der architekten (zentral); aber sehr hoher overhead für die abstimmung; quelle von missverständnisse?
- vor- und nachteile zentraler und dezentraler architektur?


